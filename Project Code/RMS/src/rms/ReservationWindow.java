/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package rms;

import entities.Table;
import entities.Waiter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;


public class ReservationWindow extends javax.swing.JDialog {


    public ReservationWindow() {
        initComponents();
        
        availableTables.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        JTableHeader tableHeader = availableTables.getTableHeader();
        DefaultTableCellRenderer renderer = (DefaultTableCellRenderer) tableHeader  
                    .getDefaultRenderer();  
        renderer.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);
        
        setTitle("Reservation");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        myCalendar2 = new rms.MyCalendar();
        cbTime = new javax.swing.JComboBox();
        txtDate = new javax.swing.JTextField();
        cbSize = new javax.swing.JComboBox();
        btnSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        availableTables = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtCustName = new javax.swing.JTextField();
        txtCellPhone = new javax.swing.JTextField();
        btnReserve = new javax.swing.JButton();
        cbQuickCheckin = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        txtTableNum = new javax.swing.JTextField();

        setLocationByPlatform(true);

        myCalendar2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/calendarIcon.jpg"))); // NOI18N
        myCalendar2.setMargin(new java.awt.Insets(0, 14, 2, 14));
        myCalendar2.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                myCalendar2PropertyChange(evt);
            }
        });

        cbTime.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Lunch", "Dinner" }));
        cbTime.setName("cbTime"); // NOI18N
        cbTime.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbTimeItemStateChanged(evt);
            }
        });

        txtDate.setEditable(false);
        txtDate.setMargin(new java.awt.Insets(2, 2, 0, 2));
        txtDate.setName("txtDate"); // NOI18N
        txtDate.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtDateCaretUpdate(evt);
            }
        });

        cbSize.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Any", "2", "4", "8" }));
        cbSize.setName("cbSize"); // NOI18N
        cbSize.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbSizeItemStateChanged(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.setEnabled(false);
        btnSearch.setName("btnSearch"); // NOI18N
        btnSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSearchMouseClicked(evt);
            }
        });

        availableTables.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Table Size", "Free Tables"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        availableTables.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        availableTables.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                availableTablesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(availableTables);
        if (availableTables.getColumnModel().getColumnCount() > 0) {
            availableTables.getColumnModel().getColumn(1).setResizable(false);
        }

        jLabel1.setText("Customer Name:");

        jLabel2.setText("Cell Phone:");

        txtCustName.setName("txtCustName"); // NOI18N
        txtCustName.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtCustNameCaretUpdate(evt);
            }
        });

        txtCellPhone.setName("txtCellPhone"); // NOI18N
        txtCellPhone.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtCellPhoneCaretUpdate(evt);
            }
        });

        btnReserve.setEnabled(false);
        btnReserve.setLabel("Reserve");
        btnReserve.setName("btnReserve"); // NOI18N
        btnReserve.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnReserveMouseClicked(evt);
            }
        });

        cbQuickCheckin.setText("Quick Checkin");

        jLabel3.setText("e.g. 1234567890");

        txtTableNum.setName("txtTableNumber"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(myCalendar2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addComponent(cbTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(cbSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(btnSearch))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtCustName)
                            .addComponent(txtCellPhone)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(cbQuickCheckin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txtTableNum)
                                    .addComponent(btnReserve, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addContainerGap(20, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cbTime)
                        .addComponent(cbSize)
                        .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(myCalendar2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtDate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtCustName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtCellPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbQuickCheckin)
                    .addComponent(txtTableNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(btnReserve)
                .addGap(40, 40, 40))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void myCalendar2PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_myCalendar2PropertyChange
        if(evt.getPropertyName().equals("ToolTipText"))
        {
            txtDate.setText(myCalendar2.getToolTipText());
        }
    }//GEN-LAST:event_myCalendar2PropertyChange

    private void txtDateCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtDateCaretUpdate

        if(!"".equals(txtDate.getText()))
        {
            btnSearch.setEnabled(true);
        }
        else 
        {
            btnSearch.setEnabled(false);
        }
    }//GEN-LAST:event_txtDateCaretUpdate

    private void txtCustNameCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtCustNameCaretUpdate

        setReserveButtonEnable();
    }//GEN-LAST:event_txtCustNameCaretUpdate

    private boolean CheckPhoneFormat(String phoneNumber)
    {
        if(phoneNumber.length()!=10)
        {
            return false;
        }
        
        try
        {
            Integer.parseInt(phoneNumber);
        }
        catch(NumberFormatException e)
        {
            return false;
        }
        
        return true;
    }
    
    private ArrayList getAvailableTables(String date, String time, String size)
    {
        ArrayList tables = new ArrayList();
        
        if(!"Any".equals(size))
        {
            Table temp = getAvailableTable(date, time, size);
            tables.add(temp);
        }
        else
        {
            Table temp1 = getAvailableTable(date, time, "2");
            if(temp1!=null)
            {
                tables.add(temp1);
            }
            Table temp2 = getAvailableTable(date, time, "4");
            if(temp2!=null)
            {
                tables.add(temp2);
            }
            Table temp3 = getAvailableTable(date, time, "8");
            if(temp3!=null)
            {
                tables.add(temp3);
            }
        }
        return tables;
    }
    
    private Table getAvailableTable(String date, String time, String size)
    {
        Connection cn = null;
        Statement stmt = null;
        Table rtTable = null;
        
        try {
                //search database
                Class.forName( "com.mysql.jdbc.Driver" );
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ReservationWindow.class.getName()).
                        log(Level.SEVERE,
                        null,
                        ex);
            }
        try {
            cn = DriverManager.getConnection( "jdbc:mysql://localhost:3306/rms?zeroDateTimeBehavior=convertToNull", "rmsUser", "12345678" );
        } catch (SQLException ex) {
            Logger.getLogger(ReservationWindow.class.getName()).
                    log(Level.SEVERE,
                    null,
                    ex);
        }
            
        try {
            stmt = cn.createStatement();
        } catch (SQLException ex) {
            Logger.getLogger(ReservationWindow.class.getName()).
                    log(Level.SEVERE,
                    null,
                    ex);
        }
        String sql = "SELECT * FROM tables where TableSize=" + size;
        try {
            ResultSet rs = stmt.executeQuery(sql);
            while(rs.next())
            {
                rtTable = new Table();
                rtTable.setTableNumber(rs.getInt(2));
                rtTable.setTableSize(rs.getInt(1));
            }
        } catch (SQLException ex) {
            Logger.getLogger(ReservationWindow.class.getName()).
                    log(Level.SEVERE,
                    null,
                    ex);
        }
            
        String sql1 = "SELECT count(*) FROM Reservation where " + 
                "Date=" + "'" + date + "'" +
                "and Time=" + "'" + time + "'" + 
                "and TableSize=" + "'" + size + "'";
        try {
            ResultSet rs = stmt.executeQuery(sql1);
            while(rs.next())
            {
                int exist = rs.getInt(1);
                rtTable.setTableNumber(rtTable.getTableNumber()- exist);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ReservationWindow.class.getName()).
                    log(Level.SEVERE,
                    null,
                    ex);
        }
        try {
            cn.close();
        } catch (SQLException ex) {
            Logger.getLogger(ReservationWindow.class.getName()).
                    log(Level.SEVERE,
                    null,
                    ex);
        }
        
        if(rtTable.getTableNumber()==0)
        {
            return null;
        }
        else
        {
            return rtTable;
        }
    }
    
    private void btnSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSearchMouseClicked
        String date = txtDate.getText();
        SimpleDateFormat formatDate = new SimpleDateFormat("MMM dd, yyyy");
        Date dateTime = Calendar.getInstance().getTime();
        
        String time = cbTime.getSelectedItem().toString();
        String size = cbSize.getSelectedItem().toString();
        
        try 
        {
            dateTime = formatDate.parse(date);
        } 
        catch (ParseException e) 
        {
            e.printStackTrace();
        }
        Calendar cal=Calendar.getInstance();
        cal.add(Calendar.DATE,-1);
        Date yesterday=cal.getTime();
        int compareResult = yesterday.compareTo(dateTime);
        if(compareResult==1)
        {
            JOptionPane.showMessageDialog(null,"Please select future day");
        }
        else
        {
            ArrayList tables = new ArrayList();
            tables = getAvailableTables(date,time,size);
            
            if(tables!=null)
            {
                DefaultTableModel tableModel = (DefaultTableModel) availableTables.getModel();
                tableModel.setRowCount(0);

                for(int i=0;i<tables.size();i++)
                {
                    Table temp = (Table)tables.get(i);
                    tableModel.addRow(
                            new String[] {String.valueOf(temp.getTableSize()), String.valueOf(temp.getTableNumber())});
                }

                DefaultTableCellRenderer render = new DefaultTableCellRenderer();

                render.setHorizontalAlignment(SwingConstants.CENTER);

                availableTables.getColumn("Table Size").setCellRenderer(render);
                availableTables.getColumn("Free Tables").setCellRenderer(render);

                availableTables.invalidate();
            }
            else
            {
                JOptionPane.showMessageDialog(null,"No table is available!");
            }
        }
        
        setReserveButtonEnable();
    }//GEN-LAST:event_btnSearchMouseClicked

    private void availableTablesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_availableTablesMouseClicked

        setReserveButtonEnable();
    }//GEN-LAST:event_availableTablesMouseClicked

    private void btnReserveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnReserveMouseClicked
        // TODO add your handling code here:
        String custName = txtCustName.getText();
        String cellPhone = txtCellPhone.getText();
        String date = txtDate.getText();
        String time = cbTime.getSelectedItem().toString();
        int row = availableTables.getSelectedRow();
        String tableSize = (String)availableTables.getModel().getValueAt(row,
                        0);
        String size = tableSize;
        String tableNum = txtTableNum.getText();
        boolean result = makeReservation(custName, cellPhone, date, time, size, tableSize, tableNum);
        if(result)
        {
            JOptionPane.showMessageDialog(null,"Reserve Successfully!");
        }
        else
        {
            JOptionPane.showMessageDialog(null,"Reservation Failed!");
        }
    }//GEN-LAST:event_btnReserveMouseClicked

    private boolean makeReservation(String name, String phone, String date, String time, String size, String tableSize, String tableNum)
    {
        Connection cn = null;
        Statement stmt = null;
        Waiter waiter = null;
        String waiterName = null;
        
        try {
                //search database
                Class.forName( "com.mysql.jdbc.Driver" );
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ReservationWindow.class.getName()).
                        log(Level.SEVERE,
                        null,
                        ex);
                return false;
            }
        try {
            cn = DriverManager.getConnection( "jdbc:mysql://localhost:3306/rms?zeroDateTimeBehavior=convertToNull", "rmsUser", "12345678" );
        } catch (SQLException ex) {
            Logger.getLogger(ReservationWindow.class.getName()).
                    log(Level.SEVERE,
                    null,
                    ex);
            return false;
        }
            
        try {
            stmt = cn.createStatement();
        } catch (SQLException ex) {
            Logger.getLogger(ReservationWindow.class.getName()).
                    log(Level.SEVERE,
                    null,
                    ex);
            return false;
        }
        String sql = "SELECT * FROM Reservation where Time=" 
                + "'" + time + "'" + "and Phone=" + "'" + phone + "'" + 
                "and Date=" + "'" + date + "'";
        try {
            ResultSet rs = stmt.executeQuery(sql);
            if(rs.next())
            {
                JOptionPane.showMessageDialog(null,"Reservation Exists!");
                return false;
            }
        } catch (SQLException ex) {
            Logger.getLogger(ReservationWindow.class.getName()).
                    log(Level.SEVERE,
                    null,
                    ex);
            return false;
        }
        
        if(cbQuickCheckin.isSelected())
        {
            String sql4 = "SELECT * FROM Reservation where Time=" 
                + "'" + time + "'" + "and TableNumber=" + "'" + tableNum + "'" + 
                "and Date=" + "'" + date + "'";
            
            try {
            ResultSet rs = stmt.executeQuery(sql4);
            if(rs.next())
            {
                JOptionPane.showMessageDialog(null,"Table Occupied!");
                return false;
            }
            } catch (SQLException ex) {
                Logger.getLogger(ReservationWindow.class.getName()).
                        log(Level.SEVERE,
                        null,
                        ex);
                return false;
            }
            
            String sql2 = "SELECT * FROM waiter where " +
                    "Capability > 0 order by Capability desc" ;
            
            try {
            ResultSet rs = stmt.executeQuery(sql2);
            if(rs.next())
            {
                waiter = new Waiter();
                waiter.setName(rs.getString(1));
                waiter.setWorkload(rs.getInt(2)-1);
                waiterName = rs.getString(1);
            }
            } catch (SQLException ex) {
                Logger.getLogger(ReservationWindow.class.getName()).
                        log(Level.SEVERE,
                        null,
                        ex);
                return false;
            }
            
            String sql3 = "UPDATE waiter SET Capability=" +
                    "'" + waiter.getWorkload() + "' " + "where WaiterName=" 
                    + "'" + waiter.getName()+ "'";
            
            try {
            stmt.executeUpdate(sql3);
            } catch (SQLException ex) {
                Logger.getLogger(ReservationWindow.class.getName()).
                        log(Level.SEVERE,
                        null,
                        ex);
                return false;
            }
        }
            
        String sql1 = "INSERT INTO Reservation " +
                "(`CustName`, `Phone`, `Time`, `GroupSize`, " +
                "`Waiter`, `TableNumber`, `TableSize`, `Date`) VALUES " + 
                "(" + "'" +name + "'" +"," + "'" +phone + "'" +"," + "'" + 
                time + "'" + "," + "'" + size + "'" + "," + "'" + waiterName + "'"
                + "," + "'" +tableNum + "'" + "," + "'" + tableSize + "'" + "," + 
                "'" + date + "'" + ")";
        try {
            stmt.execute(sql1);
        } catch (SQLException ex) {
            Logger.getLogger(ReservationWindow.class.getName()).
                    log(Level.SEVERE,
                    null,
                    ex);
            return false;
        }
        try {
            cn.close();
        } catch (SQLException ex) {
            Logger.getLogger(ReservationWindow.class.getName()).
                    log(Level.SEVERE,
                    null,
                    ex);
        }
        return true;
    }
    
    private void txtCellPhoneCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtCellPhoneCaretUpdate
        // TODO add your handling code here:
        if(CheckPhoneFormat(txtCellPhone.getText()))
        {
            setReserveButtonEnable();
        }
        else
        {
            btnReserve.setEnabled(false);
        }
    }//GEN-LAST:event_txtCellPhoneCaretUpdate

    private void cbTimeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbTimeItemStateChanged
        // TODO add your handling code here:
        DefaultTableModel tableModel = (DefaultTableModel) availableTables.getModel();
        tableModel.setRowCount(0);
        setReserveButtonEnable();
    }//GEN-LAST:event_cbTimeItemStateChanged

    private void cbSizeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbSizeItemStateChanged
        // TODO add your handling code here:
        DefaultTableModel tableModel = (DefaultTableModel) availableTables.getModel();
        tableModel.setRowCount(0);
        setReserveButtonEnable();
    }//GEN-LAST:event_cbSizeItemStateChanged

    private void setReserveButtonEnable()
    {
        int selectRows=availableTables.getSelectedRows().length;
        if(!"".equals(txtCustName.getText()) && !"".equals(txtCellPhone.getText()) && selectRows > 0)
        {
            btnReserve.setEnabled(true);
        }
        else
        {
            btnReserve.setEnabled(false);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReservationWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReservationWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReservationWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReservationWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReservationWindow().setVisible(true);
            }
        });
    }

    private String currentDate;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable availableTables;
    private javax.swing.JButton btnReserve;
    private javax.swing.JButton btnSearch;
    private javax.swing.JCheckBox cbQuickCheckin;
    private javax.swing.JComboBox cbSize;
    private javax.swing.JComboBox cbTime;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private rms.MyCalendar myCalendar2;
    private javax.swing.JTextField txtCellPhone;
    private javax.swing.JTextField txtCustName;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtTableNum;
    // End of variables declaration//GEN-END:variables
}
